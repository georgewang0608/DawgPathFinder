{"ast":null,"code":"import _classCallCheck from \"/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/src/EdgeList.tsx\";\n\n/*\n * Copyright (C) 2022 Kevin Zatloukal.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2022 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * A text field that allows the user to enter the list of edges.\n * Also contains the buttons that the user will use to interact with the app.\n */\nvar EdgeList = /*#__PURE__*/function (_Component) {\n  _inherits(EdgeList, _Component);\n\n  var _super = _createSuper(EdgeList);\n\n  function EdgeList(props) {\n    var _this;\n\n    _classCallCheck(this, EdgeList);\n\n    _this = _super.call(this, props);\n\n    _this.onDraw = function () {\n      var lines = _this.state.inputValue.trim().split('\\n');\n\n      var edgeList = [];\n\n      for (var i = 0; i < lines.length; i++) {\n        var arg = _this.state.inputValue.trim().split(\" \");\n\n        if (arg.length !== 5) {\n          alert(\"Require 5 arguments including four coordinates and one color\");\n\n          _this.setState({\n            inputValue: ''\n          });\n\n          return;\n        } // check if the first 4 coordinates are number or out of boundary\n\n\n        for (var j = 0; j < arg.length - 1; j++) {\n          if (isNaN(Number(arg[j]))) {\n            alert(\"The input coordinate should only contains numbers\");\n\n            _this.setState({\n              inputValue: ''\n            });\n\n            return;\n          } else if (Number(arg[j]) < 0 || Number(arg[j]) > 0) {\n            alert(\"Input coordinate is out of boundary\");\n\n            _this.setState({\n              inputValue: ''\n            });\n\n            return;\n          }\n        }\n\n        if (!isNaN(Number(arg[4]))) {\n          alert(\"The fifth input is suppose to be a color\");\n\n          _this.setState({\n            inputValue: ''\n          });\n\n          return;\n        }\n\n        edgeList.push({\n          x1: Number(arg[0]),\n          y1: Number(arg[1]),\n          x2: Number(arg[2]),\n          y2: Number(arg[3]),\n          color: arg[4]\n        });\n      }\n\n      _this.props.onChange(edgeList);\n    };\n\n    _this.onClear = function () {\n      _this.setState({\n        inputValue: ''\n      });\n\n      _this.props.onChange([]);\n    };\n\n    _this.state = {\n      inputValue: ''\n    };\n    return _this;\n  }\n\n  _createClass(EdgeList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"edge-list\",\n        children: [\"Edges \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: 5,\n          cols: 30,\n          onChange: function onChange(event) {\n            console.log('textarea onChange was called');\n\n            _this2.setState({\n              inputValue: event.target.value\n            });\n          },\n          value: this.state.inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onDraw,\n          children: \"Draw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onClear,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this);\n    } // update the string input to the edges\n\n  }]);\n\n  return EdgeList;\n}(Component);\n\nexport default EdgeList;","map":{"version":3,"sources":["/Users/test/Downloads/CSE331/cse331-22sp-yunqiw68/hw-lines/src/EdgeList.tsx"],"names":["React","Component","EdgeList","props","onDraw","lines","state","inputValue","trim","split","edgeList","i","length","arg","alert","setState","j","isNaN","Number","push","x1","y1","x2","y2","color","onChange","onClear","event","console","log","target","value"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2022 Kevin Zatloukal.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2022 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\nimport React, {Component} from 'react';\nimport {ColoredEdge} from \"./ColoredEdge\";\n\ninterface EdgeListProps {\n    onChange(edges: ColoredEdge[]): void;  // called when a new edge list is ready\n                                    // TODO: once you decide how you want to communicate the edges to the App, you should\n                                    // change the type of edges so it isn't `any`\n}\n\ninterface EdgeListState {\n    inputValue: string;\n}\n\n/**\n * A text field that allows the user to enter the list of edges.\n * Also contains the buttons that the user will use to interact with the app.\n */\nclass EdgeList extends Component<EdgeListProps, EdgeListState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {inputValue: ''};\n    }\n\n    render() {\n        return (\n            <div id=\"edge-list\">\n                Edges <br/>\n                <textarea\n                    rows={5}\n                    cols={30}\n                    onChange={(event) => {console.log('textarea onChange was called');\n                    this.setState({inputValue: event.target.value})}}\n                    value={this.state.inputValue}\n                /> <br/>\n                <button onClick={this.onDraw}>Draw</button>\n                <button onClick={this.onClear}>Clear</button>\n            </div>\n        );\n    }\n\n    // update the string input to the edges\n    onDraw = () => {\n        let lines = this.state.inputValue.trim().split('\\n');\n        let edgeList : ColoredEdge[] = [];\n        for (let i = 0; i < lines.length; i++) {\n            let arg: string[] = this.state.inputValue.trim().split(\" \");\n            if (arg.length !== 5) {\n                alert(\"Require 5 arguments including four coordinates and one color\");\n                this.setState({inputValue: ''});\n                return;\n            }\n            // check if the first 4 coordinates are number or out of boundary\n            for (let j = 0; j < arg.length - 1; j++) {\n                if (isNaN(Number(arg[j]))) {\n                    alert(\"The input coordinate should only contains numbers\");\n                    this.setState({inputValue: ''});\n                    return;\n                } else if (Number(arg[j]) < 0 || Number(arg[j]) > 0) {\n                    alert(\"Input coordinate is out of boundary\");\n                    this.setState({inputValue: ''});\n                    return;\n                }\n            }\n            if (!isNaN(Number(arg[4]))) {\n                alert(\"The fifth input is suppose to be a color\");\n                this.setState({inputValue: ''});\n                return;\n            }\n            edgeList.push({x1: Number(arg[0]), y1: Number(arg[1]), x2: Number(arg[2]), y2: Number(arg[3]), color: arg[4]});\n        }\n        this.props.onChange(edgeList);\n    }\n\n    // clear the input and alert other component\n    onClear = () => {\n        this.setState({inputValue: ''});\n        this.props.onChange([]);\n    }\n}\n\nexport default EdgeList;\n"]},"metadata":{},"sourceType":"module"}